grid_box.cpp:    if(mb == MBTN_LEFT && (model.tool == TOOL_DROPPER || wxGetKeyState(WXK_CONTROL)) && in_bounds(pen, layer().canvas_dimen()))
grid_box.cpp:    if(model.tool == TOOL_SELECT)
grid_box.cpp:    else if(model.tool == TOOL_STAMP && mb == MBTN_LEFT)
grid_box.cpp:    if(model.tool == TOOL_SELECT)
grid_box.cpp:            if(model.tool == TOOL_SELECT && layer().canvas_selector[c])
grid_box.cpp:    else if(model.tool == TOOL_STAMP)
grid_box.hpp:        if(model.tool == TOOL_SELECT && !pasting())
id.hpp:    ID_TOOL_STAMP,
id.hpp:    ID_TOOL_DROPPER,
id.hpp:    ID_TOOL_SELECT,
level.cpp:        selecting_objects && mouse_down && model.tool == TOOL_SELECT && level->current_layer == OBJECT_LAYER;
level.cpp:        if(model.tool == TOOL_STAMP || model.tool == TOOL_SELECT)
level.cpp:            if(model.tool == TOOL_SELECT)
level.cpp:            else if(model.tool == TOOL_STAMP)
level.cpp:        if(selecting_objects && model.tool == TOOL_SELECT)
main.cpp:            bool const can_fill = model.tool == TOOL_SELECT;
main.cpp:    template<tool_t T>
main.cpp:        model.tool = TOOL_SELECT;
main.cpp:        tool_bar->ToggleTool(TOOL_SELECT, true);
main.cpp:        tool_bar->Refresh();
main.cpp:    wxToolBar* tool_bar;
main.cpp:    tool_bar = new wxToolBar(this, wxID_ANY);
main.cpp:    tool_bar->SetWindowStyle(wxTB_VERTICAL);
main.cpp:    tool_bar->AddRadioTool(ID_TOOL_STAMP, "Stamp", MAKE_BITMAP(src_img_stamp_png));
main.cpp:    tool_bar->AddRadioTool(ID_TOOL_DROPPER, "Dropper", MAKE_BITMAP(src_img_dropper_png));
main.cpp:    select_tool = tool_bar->AddRadioTool(ID_TOOL_SELECT, "Select", MAKE_BITMAP(src_img_select_png));
main.cpp:    tool_bar->Realize();
main.cpp:    sizer->Add(tool_bar, wxSizerFlags().Expand());
main.cpp:    Bind(wxEVT_TOOL, &frame_t::on_tool<TOOL_STAMP>, this, ID_TOOL_STAMP);
main.cpp:    Bind(wxEVT_TOOL, &frame_t::on_tool<TOOL_DROPPER>, this, ID_TOOL_DROPPER);
main.cpp:    Bind(wxEVT_TOOL, &frame_t::on_tool<TOOL_SELECT>, this, ID_TOOL_SELECT);
model.hpp:    tool_t tool = {};
tool.hpp:#ifndef TOOL_HPP
tool.hpp:#define TOOL_HPP
tool.hpp:enum tool_t
tool.hpp:    TOOL_STAMP,
tool.hpp:    TOOL_DROPPER,
tool.hpp:    TOOL_SELECT,
